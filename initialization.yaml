- name: Initialization
  hosts: localhost
  vars:
    OCP_RELEASE: "4.3.0"
  tasks:
    - name: Update OCP_RELEASE into .bashrc
      lineinfile:
        path: $HOME/.bashrc
        regexp: "^export OCP_RELEASE"
        line: "export OCP_RELEASE=4.3.0"

    - name: Download OC Client Tool
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ OCP_RELEASE }}/openshift-client-linux-{{ OCP_RELEASE }}.tar.gz
        dest: /home/dekim-redhat.com

    - name: Extract OC Client Tool into /usr/local/sbin/
      shell: sudo tar xzf /home/dekim-redhat.com/openshift-client-linux-{{ OCP_RELEASE }}.tar.gz -C /usr/local/sbin/ oc kubectl
      args:
        chdir: /usr/local/sbin/
        creates: oc

    - name: Create bash_completion for openshift
      shell: oc completion bash | sudo tee /etc/bash_completion.d/openshift > /dev/null
      args:
        chdir: /etc/bash_completion.d/
        creates: openshift

#    - name: Create Directory for Registry
#      file:
#        path: /opt/registry/{{ item }}
#        state: directory
#        owner: cloud-user
#        recurse: yes
#      loop:
#        - auth
#        - certs
#        - data
#      become: true
#
#    - name: Create SSL Certification
#      expect:
#        echo: yes
#        chdir: /opt/registry/certs
#        command: openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt
#        timeout: 10
#        responses:
#          (.*)Country Name(.*): "KR"
#          (.*)State or Province Name(.*): "SEOUL"
#          (.*)Locality Name(.*): "SEOUL"
#          (.*)Organization Name(.*): "Red Hat"
#          (.*)Organizational Unit Name(.*): "GPTE"
#          (.*)Common Name(.*): "utilityvm.example.com"
#          (.*)Email Address(.*): "test@redhat.com"


- name: Deploy Container Registry
  hosts: utilityvm.example.com
  remote_user: cloud-user
  tasks:
    - name: Create Directory for Registry
      file:
        path: /opt/registry/{{ item }}
        state: directory
        owner: cloud-user
        recurse: yes
      loop:
        - auth
        - certs
        - data
      become: true

    - name: Install expect package
      yum:
        name: expect
        state: present
      become: true

#    - name: Create SSL Certification
#      shell: |
#        spawn openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/domain.key -x509 -days 365 -out /opt/registry/certs/domain.crt
#
#        expect "(.*)Country Name(.*):"
#        send -- "KR\r"
#        
#        expect "(.*)State or Province Name(.*):"
#        send -- "SEOUL\r"
#        
#        expect "(.*)Locality Name(.*):"
#        send -- "SEOUL\r"
#        
#        expect "(.*)Organization Name(.*):"
#        send -- "Red Hat\r"
#        
#        expect "(.*)Organizational Unit Name(.*):"
#        send -- "GPTE\r"
#        
#        expect "(.*)Common Name(.*):"
#        send -- "utilityvm.example.com\r"
#        
#        expect "(.*)Email Address(.*):"
#        send -- "test@redhat.com\r"
#
#        interact
#
#      args:
#        executable: /usr/bin/expect


#    - name: Create SSL Certification
#      expect:
#        echo: yes
#        chdir: /opt/registry/certs
#        command: openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt
#        timeout: 10
#        responses:
#          (.*)Country Name(.*): "KR"
#          (.*)State or Province Name(.*): "SEOUL"
#          (.*)Locality Name(.*): "SEOUL"
#          (.*)Organization Name(.*): "Red Hat"
#          (.*)Organizational Unit Name(.*): "GPTE"
#          (.*)Common Name(.*): "utilityvm.example.com"
#          (.*)Email Address(.*): "test@redhat.com"


    - name: Create htpasswd
      shell: htpasswd -bBc /opt/registry/auth/htpasswd openshift redhat
      args:
        creates: /opt/registry/auth/htpasswd

#    - name: Create htpasswd
#      htpasswd:
#        path: /opt/registry/auth/htpasswd
#        crypt_scheme: bcrypt
#        name: openshift
#        password: redhat
#      become: true

    - name: Cleaning existing container
      shell: |
        podman stop `podman ps -a --format {{ '{{' }}.ID{{ '}}' }}`
        podman rm `podman ps -a --format {{ '{{' }}.ID{{ '}}' }}`
        podman rmi `podman images -a --format {{ '{{' }}.ID{{ '}}' }}`
      ignore_errors: true

    - name: Run mirror-registry pod
      shell: |
        podman run -d --name mirror-registry \
        -p 5000:5000 --restart=always \
        -v /opt/registry/data:/var/lib/registry:z \
        -v /opt/registry/auth:/auth:z \
        -e "REGISTRY_AUTH=htpasswd" \
        -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
        -e "REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd" \
        -v /opt/registry/certs:/certs:z \
        -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
        -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
        docker.io/library/registry:2


    - name: Copy ca files into /etc/pki/ca-trust/source/anchors
      copy:
        src: /opt/registry/certs/domain.crt
        dest: /etc/pki/ca-trust/source/anchors/
        remote_src: yes
      become: true

    - name: Execute update-ca-trust
      shell: update-ca-trust
      become: true


- name: Copy Certification to localhost
  hosts: localhost
  become: true
  tasks:
    - name: Fetch domain.crt to /etc/pki/ca-trust/source/anchors/
      shell: sudo scp utilityvm.example.com:/opt/registry/certs/domain.crt /etc/pki/ca-trust/source/anchors/
      args:
        creates: /etc/pki/ca-trust/source/anchors/domain.crt
#      fetch:
#        src: /opt/registry/certs/domain.crt
#        dest: /etc/pki/ca-trust/source/anchors/
#        flat: true
#      become: true

    - name: Execute update-ca-trust
      shell: update-ca-trust
